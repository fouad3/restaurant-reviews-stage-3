"use strict";!function(){function i(n){return new Promise(function(e,t){n.onsuccess=function(){e(n.result)},n.onerror=function(){t(n.error)}})}function a(n,r,o){var a,e=new Promise(function(e,t){i(a=n[r].apply(n,o)).then(e,t)});return e.request=a,e}function e(e,n,t){t.forEach(function(t){Object.defineProperty(e.prototype,t,{get:function(){return this[n][t]},set:function(e){this[n][t]=e}})})}function t(t,n,r,e){e.forEach(function(e){e in r.prototype&&(t.prototype[e]=function(){return a(this[n],e,arguments)})})}function n(t,n,r,e){e.forEach(function(e){e in r.prototype&&(t.prototype[e]=function(){return this[n][e].apply(this[n],arguments)})})}function r(e,r,t,n){n.forEach(function(n){n in t.prototype&&(e.prototype[n]=function(){return e=this[r],(t=a(e,n,arguments)).then(function(e){if(e)return new u(e,t.request)});var e,t})})}function o(e){this._index=e}function u(e,t){this._cursor=e,this._request=t}function s(e){this._store=e}function c(n){this._tx=n,this.complete=new Promise(function(e,t){n.oncomplete=function(){e()},n.onerror=function(){t(n.error)},n.onabort=function(){t(n.error)}})}function l(e,t,n){this._db=e,this.oldVersion=t,this.transaction=new c(n)}function f(e){this._db=e}e(o,"_index",["name","keyPath","multiEntry","unique"]),t(o,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),r(o,"_index",IDBIndex,["openCursor","openKeyCursor"]),e(u,"_cursor",["direction","key","primaryKey","value"]),t(u,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(n){n in IDBCursor.prototype&&(u.prototype[n]=function(){var t=this,e=arguments;return Promise.resolve().then(function(){return t._cursor[n].apply(t._cursor,e),i(t._request).then(function(e){if(e)return new u(e,t._request)})})})}),s.prototype.createIndex=function(){return new o(this._store.createIndex.apply(this._store,arguments))},s.prototype.index=function(){return new o(this._store.index.apply(this._store,arguments))},e(s,"_store",["name","keyPath","indexNames","autoIncrement"]),t(s,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),r(s,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),n(s,"_store",IDBObjectStore,["deleteIndex"]),c.prototype.objectStore=function(){return new s(this._tx.objectStore.apply(this._tx,arguments))},e(c,"_tx",["objectStoreNames","mode"]),n(c,"_tx",IDBTransaction,["abort"]),l.prototype.createObjectStore=function(){return new s(this._db.createObjectStore.apply(this._db,arguments))},e(l,"_db",["name","version","objectStoreNames"]),n(l,"_db",IDBDatabase,["deleteObjectStore","close"]),f.prototype.transaction=function(){return new c(this._db.transaction.apply(this._db,arguments))},e(f,"_db",["name","version","objectStoreNames"]),n(f,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(a){[s,o].forEach(function(e){a in e.prototype&&(e.prototype[a.replace("open","iterate")]=function(){var e,t=(e=arguments,Array.prototype.slice.call(e)),n=t[t.length-1],r=this._store||this._index,o=r[a].apply(r,t.slice(0,-1));o.onsuccess=function(){n(o.result)}})})}),[o,s].forEach(function(e){e.prototype.getAll||(e.prototype.getAll=function(e,n){var r=this,o=[];return new Promise(function(t){r.iterateCursor(e,function(e){e?(o.push(e.value),void 0===n||o.length!=n?e.continue():t(o)):t(o)})})})});var d={open:function(e,t,n){var r=a(indexedDB,"open",[e,t]),o=r.request;return o&&(o.onupgradeneeded=function(e){n&&n(new l(o.result,e.oldVersion,o.transaction))}),r.then(function(e){return new f(e)})},delete:function(e){return a(indexedDB,"deleteDatabase",[e])}};"undefined"!=typeof module?(module.exports=d,module.exports.default=module.exports):self.idb=d}();var _createClass=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}();function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var newMap,DBHelper=function(){function i(){_classCallCheck(this,i)}return _createClass(i,null,[{key:"openIdb",value:function(){return idb.open("db",2,function(e){switch(e.oldVersion){case 0:e.createObjectStore("restaurants-store",{keyPath:"id"});case 1:e.createObjectStore("reviews-store",{keyPath:"id"}).createIndex("by-restaurant","restaurant_id")}})}},{key:"getCachedRestaurants",value:function(){return i.openIdb().then(function(e){if(e)return e.transaction("restaurants-store").objectStore("restaurants-store").getAll()})}},{key:"getCachedReviews",value:function(t){return i.openIdb().then(function(e){if(e)return e.transaction("reviews-store").objectStore("reviews-store").index("by-restaurant").getAll(t)})}},{key:"fetchRestaurants",value:function(t){i.getCachedRestaurants().then(function(e){if(0<e.length)return t(null,e)}),fetch(i.DATABASE_URL+"restaurants").then(function(e){return e.json()}).then(function(n){return i.openIdb().then(function(e){if(e){var t=e.transaction("restaurants-store","readwrite").objectStore("restaurants-store");n.forEach(function(e){t.put(e)})}}),t(null,n)}).catch(function(e){return t(e,null)})}},{key:"fetchReviews",value:function(e,t){i.getCachedReviews(e).then(function(e){if(0<e.length)return t(null,e.reverse())}),fetch(i.DATABASE_URL+"reviews/?restaurant_id="+e).then(function(e){return e.json()}).then(function(n){return i.openIdb().then(function(e){if(e){var t=e.transaction("reviews-store","readwrite").objectStore("reviews-store");n.forEach(function(e){t.put(e)})}}),t(null,n.reverse())}).catch(function(e){return t(e,null)})}},{key:"fetchRestaurantById",value:function(r,o){i.fetchRestaurants(function(e,t){if(e)o(e,null);else{var n=t.find(function(e){return e.id==r});n?o(null,n):o("Restaurant does not exist",null)}})}},{key:"fetchRestaurantByCuisine",value:function(r,o){i.fetchRestaurants(function(e,t){if(e)o(e,null);else{var n=t.filter(function(e){return e.cuisine_type==r});o(null,n)}})}},{key:"fetchRestaurantByNeighborhood",value:function(r,o){i.fetchRestaurants(function(e,t){if(e)o(e,null);else{var n=t.filter(function(e){return e.neighborhood==r});o(null,n)}})}},{key:"fetchRestaurantByCuisineAndNeighborhood",value:function(r,o,a){i.fetchRestaurants(function(e,t){if(e)a(e,null);else{var n=t;"all"!=r&&(n=n.filter(function(e){return e.cuisine_type==r})),"all"!=o&&(n=n.filter(function(e){return e.neighborhood==o})),a(null,n)}})}},{key:"fetchNeighborhoods",value:function(o){i.fetchRestaurants(function(e,n){if(e)o(e,null);else{var r=n.map(function(e,t){return n[t].neighborhood}),t=r.filter(function(e,t){return r.indexOf(e)==t});o(null,t)}})}},{key:"fetchCuisines",value:function(o){i.fetchRestaurants(function(e,n){if(e)o(e,null);else{var r=n.map(function(e,t){return n[t].cuisine_type}),t=r.filter(function(e,t){return r.indexOf(e)==t});o(null,t)}})}},{key:"urlForRestaurant",value:function(e){return"./restaurant.html?id="+e.id}},{key:"imageUrlForRestaurant",value:function(e){return"/img/"+e.photograph}},{key:"mapMarkerForRestaurant",value:function(e,t){var n=new L.marker([e.latlng.lat,e.latlng.lng],{title:e.name,alt:e.name,url:i.urlForRestaurant(e)});return n.addTo(newMap),n}},{key:"changeFavoriteStateForRestaurant",value:function(n,r,t){fetch("http://localhost:1337/restaurants/"+n+"/?is_favorite="+r,{method:"PUT"}).then(function(e){i.openIdb().then(function(e){var t=e.transaction("restaurants-store","readwrite").objectStore("restaurants-store");t.get(n).then(function(e){e.is_favorite=r,t.put(e)})}),t(null,"favorite status updated successfully")}).catch(function(e){t("failed to update favorite status",null)})}},{key:"addReview",value:function(e){if(navigator.onLine){var t={restaurant_id:parseInt(e.restaurantId),name:e.name,rating:parseInt(e.rating),comments:e.comments,createdAt:parseInt(e.createdAt)};fetch("http://localhost:1337/reviews",{method:"POST",body:JSON.stringify(t),headers:new Headers({"Content-Type":"application/json"})}).then(function(e){console.log("review added successfully to the server")}).catch(function(e){console.log(e)})}else i.sendWhenOnline(e)}},{key:"sendWhenOnline",value:function(e){localStorage.setItem("offlineReviewData",JSON.stringify(e)),window.addEventListener("online",function(e){var t=JSON.parse(localStorage.getItem("offlineReviewData"));null!==t&&(i.addReview(t),localStorage.removeItem("offlineReviewData"))})}},{key:"DATABASE_URL",get:function(){return"http://localhost:1337/"}}]),i}(),restaurant=void 0;window.addEventListener("offline",function(e){window.siiimpleToast.alert("No Internet Connection!")}),document.addEventListener("DOMContentLoaded",function(e){initMap()});var initMap=function(){fetchRestaurantFromURL(function(e,t){e?console.error(e):(self.newMap=L.map("map",{center:[t.latlng.lat,t.latlng.lng],zoom:16,scrollWheelZoom:!1}),L.tileLayer("https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}",{mapboxToken:"pk.eyJ1IjoiZm91YWQtYXNocmFmIiwiYSI6ImNqazE0dm1iNjA3eGszcnQ0dDNlN3k3bnAifQ.uKTfhCxs1NtirqEcRaAZwg",maxZoom:18,attribution:'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',id:"mapbox.streets"}).addTo(newMap),fillBreadcrumb(),DBHelper.mapMarkerForRestaurant(self.restaurant,self.newMap))})},fetchRestaurantFromURL=function(n){if(self.restaurant)n(null,self.restaurant);else{var r=getParameterByName("id");r?DBHelper.fetchRestaurantById(r,function(e,t){(self.restaurant=t)?(resetRestaurant(),fillRestaurantHTML(r),n(null,t)):console.error(e)}):(error="No restaurant id in URL",n(error,null))}},fillRestaurantHTML=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:self.restaurant;document.getElementById("restaurant-name").innerHTML=t.name,document.getElementById("restaurant-address").innerHTML=t.address;var n=document.getElementById("restaurant-img");n.className="restaurant-img";var r=DBHelper.imageUrlForRestaurant(t),o="webp";n.src=r+"-800_2x."+o,n.setAttribute("srcset",r+"-800_2x."+o+" 800w, "+r+"-400_1x."+o+" 400w"),n.setAttribute("alt",t.name+" Restaurant"),document.getElementById("restaurant-cuisine").innerHTML=t.cuisine_type,t.operating_hours&&fillRestaurantHoursHTML(),DBHelper.fetchReviews(e,function(e,t){e?console.error(e):(resetReviews(),fillReviewsHTML(t))})},fillRestaurantHoursHTML=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurant.operating_hours,t=document.getElementById("restaurant-hours");for(var n in e){var r=document.createElement("tr"),o=document.createElement("td");o.innerHTML=n,r.appendChild(o);var a=document.createElement("td");a.innerHTML=e[n],r.appendChild(a),t.appendChild(r)}},fillReviewsHTML=function(e){var t=document.getElementById("reviews-container"),n=document.createElement("h2");if(n.setAttribute("id","reviewsTitle"),n.innerHTML="Reviews",t.appendChild(n),!e){var r=document.createElement("p");return r.innerHTML="No reviews yet!",void t.appendChild(r)}var o=document.getElementById("reviews-list");e.forEach(function(e){o.appendChild(createReviewHTML(e))}),t.appendChild(o)},createReviewHTML=function(e){var t=document.createElement("li"),n=document.createElement("p");n.innerHTML=e.name,t.appendChild(n);var r=document.createElement("p");r.innerHTML=new Date(e.createdAt).toLocaleString(),t.appendChild(r);var o=document.createElement("p");o.innerHTML="Rating: "+e.rating,t.appendChild(o);var a=document.createElement("p");return a.innerHTML=e.comments,t.appendChild(a),t},fillBreadcrumb=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurant,t=document.getElementById("breadcrumb"),n=document.createElement("li");n.innerHTML=e.name,t.appendChild(n)},getParameterByName=function(e,t){t||(t=window.location.href),e=e.replace(/[\[\]]/g,"\\$&");var n=new RegExp("[?&]"+e+"(=([^&#]*)|&|#|$)").exec(t);return n?n[2]?decodeURIComponent(n[2].replace(/\+/g," ")):"":null},resetRestaurant=function(){self.newMap&&self.newMap.remove();var e=document.getElementById("breadcrumb");e.innerHTML="";var t=document.createElement("li");t.innerHTML="<a href='/'>Home</a>",e.appendChild(t);var n=document.getElementById("restaurant-hours");n&&(n.innerHTML="")},resetReviews=function(){var e=document.getElementById("reviewsTitle");e&&e.remove();var t=document.getElementById("reviews-list");t.innerHTML&&(t.innerHTML="")},addReview=function(){var e=document.getElementById("reviewer-name").value,t=document.getElementById("rating-select").value,n=document.getElementById("reviewer-comment").value,r=document.getElementById("reviews-list");if(e&&n){event.preventDefault();var o={name:e,createdAt:(new Date).getTime(),rating:t,comments:n};r.insertBefore(createReviewHTML(o),r.childNodes[0]),o.restaurantId=self.restaurant.id,DBHelper.addReview(o),document.getElementById("review-form").reset()}};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
